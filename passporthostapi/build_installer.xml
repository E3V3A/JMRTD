<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="jmrtd" default="all" basedir=".">

	<description>
		JMRTD host API distribution build file
	</description>

	<!-- Global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="bin" />
	<property name="dist" location="dist" />
	<property name="distlib" location="${dist}/lib" />

	<property file="jmrtd_installer.properties" />

	<property name="app_title" value="${app_name} ${app_version}" />
	<property name="izpack-standalone-compiler" value="${izpack_dir}/lib/standalone-compiler.jar" />

	<!-- sosshared class files will be included in main jar -->
	<property name="sos-shared-src" location="${basedir}/../sosshared/src" />
	<property name="sos-shared-build" location="${basedir}/../sosshared/build" />
	
	<!-- Terminal provider classes will be included in main jar -->
	<property name="acrprovider-build" location="${basedir}/../acrprovider/bin" />
	<property name="crefprovider-build" location="${basedir}/../crefprovider/bin" />
	<property name="jcopprovider-build" location="${basedir}/../jcopprovider/bin" />

	<target name="all" description="Build everything" depends="init, dist, doc, izpack_installer, jsmooth_installer" />

	<target name="init" depends="check_conditional_properties" description="Initializes some variables">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />

		<!-- Create the distribution directory structure -->
		<mkdir dir="${distlib}" />
	</target>
	
	<target name="compile" depends="init" description="Compiles the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}:${sos-shared-src}" classpath="${bcprov_dir}/${bcprov_jar}" destdir="${build}" />
	</target>

	<!-- Convert to 1.3 classes -->
	<target name="weave" depends="compile" if="is_retroweaver_available">
		<taskdef name="retroweaver"
			classpath="${retroweaver_dir}/${retroweaver_jar}"
			classname="net.sourceforge.retroweaver.ant.RetroWeaverTask" />

		  <retroweaver target="1.3">
		    <fileset dir="${build}">
		      <include name="**/*.class"/>
		    </fileset>
		  </retroweaver>
		
		<copy todir="${distlib}">
			<fileset dir="${retroweaver_dir}" includes="${retroweaver_rt_jar}" />
		</copy>
	</target>

	<target name="extensions" depends="init" description="Copies extensions into distribution directory">
		<!-- Copy bouncy castle -->
		<copy todir="${distlib}">
			<fileset file="${bcprov_dir}/${bcprov_jar}" />
		</copy>

		<!-- Copy jai imageio -->
		<copy todir="${distlib}">
			<fileset dir="${jai_imageio_jar_dir}" includes="${jai_imageio_jar}" />
			<fileset dir="${jai_imageio_jar_dir}" includes="${clibwrapper_jiio_jar}" />
		</copy>
		<copy todir="${distlib}">
			<fileset dir="${jai_imageio_bin_dir}" includes="${libclib_jiio}" />
		</copy>

	</target>

	<target name="dist" depends="extensions, weave, compile" description="Generates the distribution .jar file">
		<!-- Create a new header for README containing version number -->
		<concat append="false" force="true" destfile="${dist}/README">
			<header filtering="no" trimleading="yes">${app_title}-${DSTAMP}

			</header>
			<fileset dir="." includes="README" />
		</concat>

		<!-- Copy license, etc. -->
		<copy todir="${dist}">
			<fileset dir="." includes="LICENSE" />
		</copy>

		<!-- Create the distribution jar file -->
		<jar jarfile="${distlib}/jmrtd.jar">
			<manifest>
				<attribute name="Main-class" value="${app_main_class}" />
				<attribute name="VMOptions" value="${vm_options}" />
				<attribute name="Class-path" value="${bcprov_jar} ${jai_imageio_jar} ${clibwrapper_jiio_jar} ${retroweaver_rt_jar}" />
				<attribute name="Built-By" value="${user.name} on ${os.name} ${os.arch}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${author_name}"/>
				<attribute name="Implementation-Title" value="${app_name}"/>
				<attribute name="Implementation-Version" value="${app_version}-${DSTAMP}"/>
			</manifest>
			<fileset dir="${build}/" includes="**/*.class" />
			<fileset dir="${sos-shared-build}" includes="**/*.class" />
			<fileset dir="${acrprovider-build}" includes="**/*.class" />
			<fileset dir="${crefprovider-build}" includes="**/*.class" />
			<fileset dir="${jcopprovider-build}" includes="**/*.class" />
			<fileset dir="." includes="images/jmrtd_logo-48x48.png,images/jmrtd_logo-100x100.png,images/famfamfam_silk/*.png,images/flags/*.png" />
			<fileset dir="." includes="csca/*.*" />
			<fileset dir="${dist}" includes="README,LICENSE" />
		</jar>
		
	</target>

	<target name="izpack_installer" depends="init, dist" description="Generates an installer .jar file using IzPack" if="is_izpack_available">
		<!-- Use IzPack to create the installer jar -->
			<!-- Defines IzPack Ant task -->
		<taskdef name="izpack"
				classpath="${izpack-standalone-compiler}"
				classname="com.izforge.izpack.ant.IzPackTask" />
		
		<izpack
				output="jmrtd_installer.jar"
				basedir="${basedir}"
				izpackdir="${izpack_dir}">
			<config><![CDATA[
				<installation version="1.0">
				    <info>
				        <appname>@{app_name}</appname>
				        <appversion>@{app_version}</appversion>
				        <authors>
				            <author name="@{author_name}"
				                    email="@{author_email}" />
				        </authors>
				        <url>@{author_url}</url>
				        <javaversion>@{minimal_jre_version}</javaversion>
				    </info>
				    
				    <guiprefs width="640" height="480" resizable="no">
				        <modifier key="useHeadingPanel" value="yes" />
				    </guiprefs>

				    <locale>
				        <langpack iso3="eng" />
				    </locale>

				    <resources>
				        <!-- res id="LicencePanel.licence" src="LICENSE" / -->
				        <!-- res id="InfoPanel.info" src="README" / -->
				        <res id="Installer.image" src="images/jmrtd_installer_splash.png" />
				        <res id="Heading.image" src="images/jmrtd_logo-48x48.png"/>
						<res id="shortcutSpec.xml" src="jmrtd_installer_shortcuts_windows.xml" />
						<res id="Unix_shortcutSpec.xml" src="jmrtd_installer_shortcuts_unix.xml" />
				    </resources>

				    <native type="izpack" name="ShellLink.dll" /> <!-- TBD: only on win -->

				    <panels>
				        <panel classname="HelloPanel" />
				        <!-- panel classname="InfoPanel" / -->
				        <panel classname="TargetPanel" /> 
				        <!-- panel classname="PacksPanel" / -->
				        <panel classname="InstallPanel" />
				        <panel classname="ShortcutPanel" />
				        <panel classname="SimpleFinishPanel" />
				    </panels>
				    
				    <packs>
				        <pack name="Passport API" required="yes">
				            <description>The Passport API and host application</description>

				            <file src="README" targetdir="$INSTALL_PATH" />
							<parsable targetfile="$INSTALL_PATH/README" type="plain" />
				
				            <file src="LICENSE" targetdir="$INSTALL_PATH" />

				            <file src="jmrtd.sh" targetdir="$INSTALL_PATH" />
				            <parsable targetfile="$INSTALL_PATH/jmrtd.sh" type="shell" />
				            <executable targetfile="$INSTALL_PATH/jmrtd.sh" stage="never" />

				            <file src="jmrtd.bat" targetdir="$INSTALL_PATH" />
				            <parsable targetfile="$INSTALL_PATH/jmrtd.bat" type="shell" />
				            <executable targetfile="$INSTALL_PATH/jmrtd.bat" stage="never" />

				            <file src="uninstall.bat" targetdir="$INSTALL_PATH" /> <!-- TBD: only on win -->
				            <parsable targetfile="$INSTALL_PATH/uninstall.bat" type="shell" />
				            <executable targetfile="$INSTALL_PATH/uninstall.bat" stage="never" />
						    <file src="images/jmrtd_spiral.ico" targetdir="$INSTALL_PATH" /> <!-- TBD: only on win -->
				            <file src="images/uninstall.ico" targetdir="$INSTALL_PATH" /> <!-- TBD: only on win -->
				
				            <file src="uninstall.sh" targetdir="$INSTALL_PATH" /> <!-- TBD: only on unix -->
				            <parsable targetfile="$INSTALL_PATH/uninstall.sh" type="shell" />
				            <executable targetfile="$INSTALL_PATH/uninstall.sh" stage="never" />
				            <file src="images/jmrtd_spiral-48x48.png" targetdir="$INSTALL_PATH" /> <!-- TBD: only on unix -->
	        			    <file src="images/uninstall-48x48.png" targetdir="$INSTALL_PATH" /> <!-- TBD: only on unix -->
				        
				            <fileset dir="dist" src="lib/*" targetdir="$INSTALL_PATH" />
				        </pack>
				    </packs>

				</installation>
			]]></config>
		</izpack>
	</target>
		
	<target name="jsmooth_installer" depends="dist" description="Wraps installer in .exe file using JSmooth" if="is_jsmooth_available">
		<!-- Use JSmooth to create a Windows executable from the installer jar -->
		<taskdef name="jsmoothgen"
			classpath="${jsmooth_dir}/lib/jsmoothgen-ant.jar"
   		 	classname="net.charabia.jsmoothgen.ant.JSmoothGen" />
		
		<jsmoothgen
			skeletonroot="${jsmooth_dir}/skeletons"
			project="jmrtd_installer.jsmooth" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete file="jmrtd_installer.jar" />
		<delete file="jmrtd_installer.exe" />
	</target>

	<target name="doc" description="Generates API docs" if="build_java_doc">
		<javadoc classpath="${sos-shared-build};${bcprov_dir}/${bcprov_jar}"
				destdir="apidocs"
				package="false"
				doctitle="${app_title}"
				windowtitle="${app_title}"
				header="${app_title}"
				packagenames="sos.mrtd">
			<link href="http://java.sun.com/javase/6/docs/api" />
			<link href="http://java.sun.com/javase/6/docs/jre/api/security/smartcardio/spec/" />
			<link href="http://www.bouncycastle.org/docs/docs1.6" />
			<!-- link href="http://java.sun.com/products/javacard/htmldoc" / -->
			<!-- link href="http://www.cs.ru.nl/~woj/jcopapi/" / -->
			<sourcepath path="src;${sos-shared-src}" />
			<package name="sos.mrtd" />
			<package name="sos.data" />
			<package name="sos.smartcards" />
			<package name="sos.tlv" />
			<!-- package name="sos.gui" / --> <!-- Not used in public interface -->
			<!-- package name="sos.util" / --> <!-- Not used in public interface -->
			
		</javadoc>
	</target>
	
	<!-- Conditional stuff is set below -->

	<target name="check_conditional_properties" description="Sets some properties depending on build platform">
		<available file="${acrprovider-build}" property="is_acr_available" />
		<available file="${crefprovider-build}" property="is_cref_available" />
		<available file="${jcopprovider-build}" property="is_jcop_available" />
		<available classname="com.izforge.izpack.ant.IzPackTask" classpath="${izpack-standalone-compiler}" property="is_izpack_available" />
		<available classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpath="${jsmooth_dir}/lib/jsmoothgen-ant.jar" property="is_jsmooth_available" />
		<available classname="net.sourceforge.retroweaver.ant.RetroWeaverTask" classpath="${retroweaver_dir}/${retroweaver_jar}" property="is_retroweaver_available" />
		<condition property="is_os_windows">
	  		<or>
	  			<equals arg1="${os.name}" arg2="Windows 95" />
	  			<equals arg1="${os.name}" arg2="Windows 98" />
	  			<equals arg1="${os.name}" arg2="Windows 2000" />
	  			<equals arg1="${os.name}" arg2="Windows XP" />
	  			<equals arg1="${os.name}" arg2="Windows NT" />
	  			<equals arg1="${os.name}" arg2="Windows Vista" />
			</or>
		</condition>
		<condition property="is_os_unix">
			<or>
				<equals arg1="${os.name}" arg2="AIX" />
				<equals arg1="${os.name}" arg2="Digital Unix" />
				<equals arg1="${os.name}" arg2="FreeBSD" />
				<equals arg1="${os.name}" arg2="HP UX" />
				<equals arg1="${os.name}" arg2="Irix" />
				<equals arg1="${os.name}" arg2="Linux" />
				<equals arg1="${os.name}" arg2="Solaris" />
			</or>
		</condition>
		<condition property="is_os_mac">
			<or>
				<equals arg1="${os.name}" arg2="Mac OS" />
				<equals arg1="${os.name}" arg2="Mac OS X" />
			</or>
		</condition>
	</target>

</project>
