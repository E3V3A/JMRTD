<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="JMRTD" default="dist" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <description>Java Machine Readable Travel Documents.</description>

  <property name="groupId" value="org.jmrtd" />
  <property name="artifactId" value="jmrtd" />
  <property name="version" value="0.5.1-SNAPSHOT" />

  <property name="software" value="/home/martijno/software" />
    
  <path id="maven-ant-tasks.classpath" path="${software}/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath" />

  <property name="default_bcprov_lib" value="${software}/bc/bcprov-jdk15on-151.jar" />
  <property name="default_certcvc_lib" value="${software}/cert-cvc-1.3.0/cert-cvc.jar" />
  <property name="default_scuba_lib" value="../scuba_smartcards/dist/lib/scuba-smartcards-0.0.4.jar" />
  
  <property environment="env" />
  
  <condition property="bcprov_lib" value="${env.BCPROV_LIB}" else="${default_bcprov_lib}">
      <isset property="env.BCPROV_LIB" />
  </condition>
  <condition property="certcvc_lib" value="${env.CERTCVC_LIB}" else="${default_certcvc_lib}">
      <isset property="env.CERTCVC_LIB" />
  </condition>
  <condition property="scuba_lib" value="${env.SCUBA_LIB}" else="${default_scuba_lib}">
      <isset property="env.SCUBA_LIB" />
  </condition>

  <property name="src" location="src" />
  <property name="build" value="build" />
  <property name="dist" value="dist" />

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${dist}/lib" />
  </target>

  <!-- define artifacts' name, which follows the convention of Maven -->
  <property name="jar" value="${dist}/lib/${artifactId}-${version}.jar" />
  <property name="javadoc-jar" value="${dist}/lib/${artifactId}-${version}-javadoc.jar" />
  <property name="sources-jar" value="${dist}/lib/${artifactId}-${version}-sources.jar" />
      
  <target name="compile" depends="init" description="Compiles the source ">
    <mkdir dir="${build}" />
    <!-- Compile the java code from ${src} into ${build} -->
    <javac includeantruntime="false" source="1.6" target="1.6" srcdir="${src}" classpath="${bcprov_lib}:${certcvc_lib}:${scuba_lib}" destdir="${build}" />    
  </target>

  <target name="jar" depends="compile" description="Generates the distribution .jar file">

    <!-- Create the distribution jar file -->
    <jar jarfile="${jar}" basedir="${build}">
      <manifest>
        <attribute name="Built-By" value="${user.name} on ${os.name} ${os.arch}" />
        <attribute name="Built-Date" value="${TODAY}" />
        <attribute name="Implementation-Vendor" value="${groupId}"/>
        <attribute name="Implementation-Title" value="${artifactId}"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
      <fileset dir="${build}" includes="**/*.class" />
    </jar>  
  </target>

  <property name="bcprov_api_url" value="http://www.bouncycastle.org/docs/docs1.5on/index.html" />

  <target name="dist" depends="jar">
     <!-- build the javadoc jar -->
     <javadoc classpath="${bcprov_lib}:${certcvc_lib}:${scuba_lib}" destdir="${dist}/javadoc">
       <sourcepath path="${src}" />
     </javadoc>
     <jar jarfile="${javadoc-jar}">
       <fileset dir="${dist}/javadoc" />
     </jar>

     <!-- build the sources jar -->
     <jar jarfile="${sources-jar}">
       <fileset dir="${src}" />
     </jar>
  </target>

  <!-- defined maven snapshots and staging repository id and url -->
  <property name="ossrh-snapshots-repository-url" 
    value="https://oss.sonatype.org/content/repositories/snapshots/" />
  <property name="ossrh-staging-repository-url" 
    value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
  <!-- there server id in the Maven settings.xml -->
  <property name="ossrh-server-id" value="ossrh" />

  <target name="deploy" depends="dist" description="deploy snapshot version to Maven snapshot repository">
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
      <arg value="-Durl=${ossrh-snapshots-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${jar}" />
    </artifact:mvn>
  </target>

  <!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
  <target name="stage" depends="dist" description="deploy release version to Maven staging repository">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${jar}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build}" />
    <delete dir="${dist}" />
  </target>

</project>

