JMRTD/SCUBA TODO (it's not a changelog, it's not a roadmap, it's a TODO file)


VERSION 0.0.1 (2006-08-17)
--------------------------

+ Initial release of the host API. 


VERSION 0.0.2 (2007-12-31)
--------------------------

+ Second release of the passport reader.


VERSION 0.3 (2008-08-05)
------------------------

+ Intermediate release to fix some bugs.
+ Oops. 0.3? That was supposed to be 0.0.3.


VERSION 0.4.1 (2008-11-23)
--------------------------

+ New GUI with preview of face image.


VERSION 0.4.2 (2009-02-06)
--------------------------

+ Added a preferences panel to the GUI
+ Non PCSC card terminals discovery by reflection
+ Progressive jpeg2k seems to work (if jai-imageio is installed) 


VERSION 0.4.3 (2009-04-17)
--------------------------

+ EAC support (thanks to Woj).
+ Split up GUI code and lib.
+ The low level smartcard stuff has been moved to a completely seperate project (SCUBA, see scuba.sourceforge.net) to allow
  other projects (Woj's driving license, Woj's PKI applet host application) to use it
+ Some minor bug fixes (like, oh, initial select APDU was not according to spec :S.. Thanks to Jean-Francois Houzard for
  bringing this to our attention.) 


VERSION 0.4.4 (2010-02-13)
--------------------------

General
+ Revert back to one jmrtd.jar (includes all of SCUBA) in distribution.
+ Move LDS data classes (*File, *Info) into org.jmrtd.lds package.
+ Move BACStore to passporthostapi (from passportapplication).
+ Fix unit test (when run from package explorer hangs on DG14 tests).
+ Make loading of GRT compatible ZIP files possible. They seem to use EF_DG<X>.BIN naming inside ZIP files. Test it.
+ Store BACStore, CSCAStore, CVCAStore, preferences in APPDATA subdir, not in user.home/.jmrtd

Preferences
+ Tabbed panes in preferences.
+ APDU tracing from preferences, at least for card manager (also for reload action?).
+ Preferences persistent storage based on JSR-10.
+ CSCA and CVCA folder settings from tab in preferences window.
+ Remember location of directory from which (passport) files were loaded, return there when opening new file.

Dependencies
+ Latest JAI ImageIO 1.2
+ Latest Bouncy Castle 1.45

Code quality
+ Check JavaDoc
+ Run Findbugs.

Web site and documentation
+ Check new docs on ICAO site, update links.
+ Fix scmmicro.com broken links in install.shtml.
+ Add a link to http://wiki.yobi.be/wiki/EPassport#Manufacturers (which manufacturer makes ePassport for which country?) on csca.shtml.


VERSION 0.4.5 (2010-08-22)
---------------------------

General
+ Use the Java Certification Path API (JSR 55) for searching certificates for SOD validation
+ LDAP interface (JNDI) to PKD. Tested with downloadable ldif from https://pkddownloadsg.icao.int/ on openldap.
+ Implement CSCA as CertStore (and for local files as KeyStore with CertStore interface).
+ Implement CVCA as KeyStore.
+ Moved BAC logic from PassportFrame to the Passport class.
+ Moved readFromService logic from PassportFrame to the Passport class.
+ Moved the verifySecurity logic from PassportFrame to the Passport class.
+ Implemented ImageIO support for WSQ finger print images, based on a JNI wrapper around http://sourceforge.net/ffpis.
+ Implemented (rudimentary) DG3, DG4, FingerInfo, IrisInfo (and related classes and interfaces).
+ Copy default files (e.g. CSCA certificates that come with the installation) to standard places during installation.

GUI
+ Only go to editor mode if user explicitly indicates (default display mode should be not editable).
+ Display card EAC information (not only on successful EAC event).

Bugs/temporary fixes
+ Remove image method in DisplayPreviewPanel only targets DG2 (displayed images could also be in DG3 - DG7, ...?)
+ Fixed some algorithmName guessing/heuristics based on OID in SODFile.

Dependencies
+ Wrapper around cert-cvc so that CVCertificates subclass java.security.cert.Certificate.
+ cert-cvc latest.
+ Check/update README and Web site to reflect correct version numbers.
+ Latest JAI ImageIO 1.2
+ Latest Bouncy Castle 1.45

Code quality
+ Check JavaDoc
+ Findbugs

Website and documentation
+ Simpler front page (move stuff to "about")


VERSION 0.4.6 (NEAR FUTURE)
---------------------------

General
+ Use String instead of Data in BAC / MRZ entry.
+ CSCA Master List via PKD cert store
- More efficient use of filters based on selector in PKD cert store impl
- CRL validity checking via PKD cert store
- Many small FIXMEs, primarily in Passport and SODFile
+ SCUBA cardmanager uses Lock/Condition primitives instead of synchronized/wait

Dependencies
+ Latest JAI ImageIO 1.2 (binary releases download from their web site seems to be broken)
+ Latest Bouncy Castle 1.46

Code quality
+ Exception handling (e.g. re-throwing more general exception types, quelling, ... see open discussion on sf https://sourceforge.net/projects/jmrtd/forums/forum/580232/topic/3999263)
- Check JavaDoc
- Findbugs


VERSION 0.4.7 / 0.5.x (FUTURE)
------------------------------

General
- Check and compare date (current) and warn if certificate has expired
- Adoption of Henning's stuff in SCUBA (finger printing Nationality of passports based on error messages) is buggy for now. Need more regression testing.
- Check dependencies on BC in public interfaces. Especially in Woj's EAC stuff.
- Make distinction between feature and image in CBEFF groups and reflect this in the data type (i.e. not a list of
  FaceInfo for DG2, but a list of lists).
- Get DG3 (finger) and DG4 (iris) bio template I/O to the same level as DG2 (face)
- Move (some of) the PKCS7 signature checking stuff from SODFile to SCUBA (it's not MRTD specific).
- Implement BAC as KeyStore?
- getEncoded() implementations for all classes in org.jmrtd.lds package, especially DG3, DG4, FingerPrintInfo, IrisInfo.

GUI
- Show CSCA certificates currently used
- Allow CSCA certificates to be added from file to local cert store from GUI
- Show progress during BAC testing in PassportFrame constructor
  (especially since some MRTDs now wait for a long time after failed attempt).
- In general: better interaction, based on user purpose/task (inspection / security testing / personalization / identity provisioning).
- When creating a new passport from scratch the user should be able to select either ID-1 or ID-3 (3 or 2 line MRZ).
  Currently it's hardcoded to ID-1.
- Alternative editor view (file tree style) on passport, showing all files available with option to save individual files as binary dumps.
  Perhaps even present ASN.1 tree in a JTree.
  
Bugs/temporary fixes
- Fix padding error during AA on Omnikey 5121 on newer versions of NIK. Restore gracefully from session?
  
Code quality
- Exception handling (e.g. re-throwing more general exception types, quelling, ...
- Need EAC samples to test with
- Need biometrics samples (DG3, DG4) to test with
- Unit tests
- Check JavaDoc
- Findbugs
- Profiler (http://www.eclipse.org/tptp/home/documents/tutorials/profilingtool/profilingexample_32.html)

ASN.1 parsing
- Test TLV input streams based on chaosinmotion stuff. Write tests. If ok, use those instead.
- ASN.1 DGs based on JavaAsn1Compiler stuff (maybe just for testing, maybe generate bits of the actual DG*File and *Info classes).

SCUBA support (for exotic card readers, etc.)
- Use Roel's libnfc with JNI wrapper for support of other readers (Arygon, etc.).
- JCOP tools supported terminals such as Pegoda (see also http://alud.sourceforge.net/, can we JNI wrap this?).
- Fix "Card has been disconnected" error in acrprovider? Restore gracefully.

Website and documentation
- A FAQ would be nice
- Compile-it-yourself instructions


VERSION 0.9.x (FUTURE)
----------------------

Features
- Webcam OCR of MRZ. How difficult could this be, really? It's always OCR-B font, one could assume fixed
  distance so that auto-focus isn't even necessary. See also https://sourceforge.net/projects/javaocr/.
- WSQ image support in pure Java.
- Nokia NFC relay terminal via Bluetooth. Implement a MIDlet for this.

Code quality
- Unit tests
- Check JavaDoc
- Findbugs
- Profiler
- ESC/Java2

Website and documentation
- Proper system documentation
- Proper user documentation
